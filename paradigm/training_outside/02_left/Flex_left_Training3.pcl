#####################################################################################################################
#####################################################################################################################

# PCL-File fuer Flex-Experiment

#####################################################################################################################
#####################################################################################################################

### Variablen-Definitionen
int ntrial = 100;											# Anzahl der Trials >> ANPASSEN VORSICHT > File ist noch nicht gross genug!!
int arraysize = 6 * ntrial; 							# Groesse der Arrays expdef
string textfile = "FlexMain_train3_left";		# Name des Inputfiles expdef
#string textfile = "flex_expdef_3.txt";

double basecount = 0.0;
double distrcount = 0.0;
double switchcount = 0.0;

double base = 80.0;	
double distr = 6.0;
double switch = 6.0;


### Definition der Input-Files (Das sind 3 verschiedene .txt-files)
input_file expdef = new input_file;      		# .txt-file mit Eintraegen fuer alle Arrays, die nur 1 Item einlesen muessen

#####################################################################################################################
### Arrays
#####################################################################################################################

### Definition der Arrays zur "Experiment-Definition"
array <string> condition[arraysize]; 				
array <string> stimulus_oben[arraysize]; 			
array <string> stimulus_unten[arraysize];	
array <int> brightness_oben[arraysize];				
array <int> brightness_unten[arraysize];			
array <int> target_button[arraysize];			

### Auffuellen der Arrays zur "Experiment-Definition" mit den Informationen aus dem .txt-file

expdef.open(textfile);
int count = 0;
loop until
   expdef.end_of_file() || count == arraysize || !expdef.last_succeeded()
begin
   count = count + 1;
   
   condition[count] = expdef.get_string();
   stimulus_oben[count] = expdef.get_string();
   stimulus_unten[count] = expdef.get_string();
   brightness_oben[count] = expdef.get_int();
   brightness_unten[count] = expdef.get_int();
   target_button[count] = expdef.get_int();
   
end;

### Warnung bei Einlesefehlern
if !expdef.last_succeeded() then
   term.print( "Error while reading! \nLetzter Werte aus Input-Datei konnte nicht ausgelesen werden. \n" )
elseif !expdef.end_of_file() then
   term.print( "Exceeded capacity!\n" )
end; 

### Ausgabe der Array-Inhalte ins Terminal
loop
   int k = 1
until
   k > count
begin
   term.print( condition[k] );
   term.print( "\n" );
   term.print( stimulus_oben[k] );
   term.print( "\n" );
   term.print( stimulus_unten[k] );
   term.print( "\n" );
   term.print( brightness_oben[k] );
   term.print( "\n" );
   term.print( brightness_unten[k] );
   term.print( "\n" );
   term.print( target_button[k] );
   term.print( "\n" );

	k = k + 1
end;

#### JETZT Trials - redefinieren & present
instruction1_trial.present();
fix_trial.present();

## Setzen aller variablen Parameter in jedem Trial

loop 
int itrial = 1;
until itrial > ntrial 
begin


## picture
inputitem_oben.set_caption(stimulus_oben[itrial]);
inputitem_oben.set_font_color(brightness_oben[itrial], brightness_oben[itrial], brightness_oben[itrial]);
inputitem_oben.redraw();

inputitem_unten.set_caption(stimulus_unten[itrial]);
inputitem_unten.set_font_color(brightness_unten[itrial], brightness_unten[itrial], brightness_unten[itrial]);
inputitem_unten.redraw();

## code f√ºr picture
task_event.set_event_code("cond:" + condition[itrial] + "stimuli_presented:" + stimulus_oben[itrial] + stimulus_unten[itrial]);
task_event.set_target_button(target_button[itrial]);

## target Button fuer ITI
itiandfix_event.set_target_button(target_button[itrial]);

main_trial.present();

# UM number corrects zu bekommen
if (condition[itrial] == "1" && (response_manager.last_response())== target_button[itrial])
	then basecount = basecount + 1.0

end;     

if (condition[itrial] == "2" && (response_manager.last_response())== target_button[itrial])
	then distrcount = distrcount + 1.0

end;    

if (condition[itrial] == "3" && (response_manager.last_response())== target_button[itrial])
	then switchcount = switchcount + 1.0

end;                         										

itrial = itrial + 1;

end;

### ABSPANN##################
double percent_correct_base;
percent_correct_base = (basecount / base) * 100.0;
double percent_correct_distr;
percent_correct_distr = (distrcount / distr) * 100.0;
double percent_correct_switch;
percent_correct_switch = (switchcount / switch) * 100.0;

logfile.add_event_entry("Prozent korrekt " + "Baseline: " + printf(percent_correct_base,"%.1f") + "%");
logfile.add_event_entry("Prozent korrekt " + "Distraktor: " + printf(percent_correct_distr,"%.1f") + "%");
logfile.add_event_entry("Prozent korrekt " + "Switch: " + printf(percent_correct_switch,"%.1f") + "%");

ende_text1.set_caption("Prozent korrekt Einzelzahl: " + printf(percent_correct_base,"%.1f") + "%\n" + "Prozent korrekt oben heller: " + printf(percent_correct_distr,"%.1f") + "%\n" + "Prozent korrekt unten heller: " + printf(percent_correct_switch,"%.1f") + "%" );  ## um aus double percent_correct einen string zu machen (damit ichs in den text schreiben kann); "%.1f" = Format, in dem mir Zahl ausgegeben werden soll, mit dem nach dem Punkt = Anzahl der Nachkommastellen
ende_text1.redraw();

ende_trial1.present();
